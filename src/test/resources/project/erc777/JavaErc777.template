package <package_name>;

import ch.qos.logback.classic.Level;
import <package_name>.generated.contracts.ERC777Token;
import io.epirus.web3j.Epirus;
import io.epirus.web3j.gas.EpirusGasProvider;
import io.epirus.web3j.gas.GasPrice;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.web3j.crypto.CipherException;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.WalletUtils;
import org.web3j.protocol.Network;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.gas.ContractGasProvider;

import java.io.IOException;
import java.math.BigInteger;
import java.nio.file.Paths;
import java.util.List;
import java.util.Arrays;
import java.util.Collections;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>This is the generated class for <code>epirus new erc777</code></p>
 * <p>It deploys the ERC777 contract in src/main/solidity/ and prints its address</p>
 * <p>For more information on how to run this project, please refer to our <a href="https://docs.epirus.io/quickstart/#deployment">documentation</a></p>
 */
public class <project_name> {

    // ERC777 token deployment parameters
    private static final String NAME = "<NAME>";
    private static final String SYMBOL = "<SYMBOL>";
    private static final List<String> DEFAULT_OPERATORS = <DEFAULT_OPERATORS>;
    private static final BigInteger INITIAL_SUPPLY = <INITIAL_SUPPLY>;

    private static final Logger log = LoggerFactory.getILoggerFactory().getLogger("org.web3j.protocol.http.HttpService");
    private static final boolean epirusDeploy = Boolean.parseBoolean(System.getenv().getOrDefault("EPIRUS_DEPLOY", "false"));
    private static final Network deployNetwork = Network.valueOf(System.getenv().getOrDefault("WEB3J_NETWORK", "rinkeby").toUpperCase());
    private static final String walletPath = System.getenv("WEB3J_WALLET_PATH");
    private static final String walletPassword = System.getenv().getOrDefault("WEB3J_WALLET_PASSWORD", "");
    private static final String nodeUrl = System.getenv().getOrDefault("WEB3J_NODE_URL", System.getProperty("WEB3J_NODE_URL"));

    public static void main(String[] args) {
        try {
            ((ch.qos.logback.classic.Logger) (log)).setLevel(epirusDeploy ? Level.ERROR : Level.INFO);
            if (!epirusDeploy && (walletPath == null || walletPassword.isBlank() || nodeUrl == null)) {
                System.out.println("As the application isn't being run using the Epirus Platform, the following environment variables are expected: " +
                        "WEB3J_WALLET_PATH, WEB3J_WALLET_PASSWORD, WEB3J_NODE_URL. Please ensure these are set and try again.");
                System.exit(-1);
            }
            Credentials credentials = getCredentials();
            Web3j web3j = getDeployWeb3j();
            ERC777Token erc777Token = deployErc777(web3j, credentials, new EpirusGasProvider(deployNetwork, GasPrice.High));
            log.info("Contract returned: " + erc777Token.getContractAddress());
            String contractAddress;
            if(epirusDeploy) {
                contractAddress = "https://" + deployNetwork.getNetworkName() + ".epirus.io/contracts/" + erc777Token.getContractAddress();
            } else {
                contractAddress = erc777Token.getContractAddress();
            }
            System.out.println(String.format("%-20s", "Contract address") + contractAddress);
            System.exit(0);
        } catch (Exception e) {
            log.error(e.getMessage());
            System.exit(1);
        }
    }

    private static Credentials getCredentials() throws IOException, CipherException {
        return WalletUtils.loadCredentials(walletPassword, Paths.get(walletPath).toFile());
    }

    private static Web3j getDeployWeb3j() throws Exception {
        if (nodeUrl == null || nodeUrl.isEmpty()) {
            return Epirus.buildWeb3j(deployNetwork);
        } else {
            log.info("Connecting to $nodeUrl");
            return Web3j.build(new HttpService(nodeUrl));
        }
    }

    private static ERC777Token deployErc777(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) throws Exception {
        if (DEFAULT_OPERATORS.size() == 0) {
            return ERC777Token.deploy(web3j, credentials, contractGasProvider, NAME, SYMBOL, Collections.singletonList(getCredentials().getAddress()), INITIAL_SUPPLY).send();
        } else {
            return ERC777Token.deploy(web3j, credentials, contractGasProvider, NAME, SYMBOL, DEFAULT_OPERATORS, INITIAL_SUPPLY).send();
        }
    }
}
